@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

class GameServer << (S,#FF7700) Singleton >> {
 - server : Server
 - tcpPort : int
 - udpPort : int
 + {static} instance : GameServer
 - setup() : void
 - registerClasses() : void
 - startServer() : void
 - setupListeners() : void
 + {static} main(String[] args) : void
}

class ReceiveHandler << (L, orchid) Listener >> {
    - lobbies : Map<Integer, Lobby>
    + connected(Connection connection) : void
    + disconnected(Connection connection) : void
    + received(Connection connection, Object object) : void
    - handleMessage(Connection connection, Message message) : void
    - sendErrorMessage(Connection connection, String message) : void
    - createNewLobby(Connection connection, String username) : int
    - sendLobbyCode(Connection connection, int roomCode) : void
    - generateRandomRoomCode() : int
}

together {
class GameMapGenerator {
    - MAP_LENGTH : int
    - MIN_POLICEMAN_TURN_POINTS : int
    - MAX_POLICEMAN_TURN_POINTS : int
    - MIN_POLICEMAN_FAKE_TURN_POINTS : int
    - MAX_POLICEMAN_FAKE_TURN_POINTS : int
    - CROSSING_PLACEMENTS_LENGTH : int
    - MIN_POLICEMAN_PLACEMENT_SPACING : int
    - policemanTurnPoints : int[]
    - policemanFakeTurnPoints : int[]
    - crossingPlacements : int[]
    - random : ThreadLocalRandom
    + generateMap(final int MAP_LENGTH) : GameMapMessage
    + getMinPolicemanTurnPoints() : int
    + getMaxPolicemanTurnPoints() : int
    + getMinPolicemanFakeTurnPoints() : int
    + getMaxPolicemanFakeTurnPoints() : int
    + getNumberOfCrossings() : int
    + getMapLength() : int
    + getMinPolicemanSpacing() : int
    - determineMapParameters() : void
    - determineNumberOfPolicemanTurnPoints : void
    - generateRandomCrossings() : int[]
    - generatePolicemanTurnPoints(int[] turnPointArray) : int[]
    - isOverlappingWithAnotherPoint(int turnPoint, int[] turnPointArray) : boolean
}

class Lobby {
    + {static} LOBBY_PLAYER_CRITERIUM : final int
    - clientsMap : Map<Connection, Float>
    - generator : GameMapGenerator
    - roomCode : final int
    - readyPlayers : Collection<Connection>
    + removeConnection(Connection connection) : void
    + addUser(Connection connection, String username) : void
    + received(Connection connection, Message message) : void
    + contains(Connection connection) : boolean
    + getUsernames() : String[]
    - notifyOthersOfJoin(Connection connection) : void
    - handleGameOver() : void
    - readyUp(Connection connection) : void
    - sendGameMap() : void
    - sendSuccessfulJoinMessage(Connection connection) : void
    - sendNotEnoughPlayersMessage(Connection connection) : void
    - handleScoreMessage(Connection connection, Object object) : void
    - sendMostRecentScores(Connection connection) : void
    - handleLeavyLobbyRequest(Connection connection) : void
}

}



package com.mygdx.dragmania.utilties.messages <<Folder>>{

}

ReceiveHandler -> com.mygdx.dragmania.utilties.messages
GameServer --> "1" com.esotericsoftware.kryonet.Server
GameServer --> "1" ReceiveHandler
GameServer -[Hidden] ReceiveHandler
ReceiveHandler --|> com.esotericsoftware.kryonet.Listener
ReceiveHandler --> "*" Lobby
Lobby --> "1" GameMapGenerator
Lobby -[Hidden] GameMapGenerator

hide com.esotericsoftware.kryonet.Listener members
hide com.esotericsoftware.kryonet.Server members

@enduml